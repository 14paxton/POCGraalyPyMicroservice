# --- Stage 1: Build VFS Resources ---
FROM container-registry.oracle.com/graalvm/native-image:24.0.1 AS builder

WORKDIR /app

# Print CPU architecture and OS info
RUN echo "== Platform Info ==" \
    && uname -m \
    && uname -a \
    && cat /etc/os-release

# Debug GraalVM installation
RUN echo "JAVA_HOME=$JAVA_HOME" && \
    java -version

# Install CPython and build tools needed for Python packages
RUN microdnf install -y \
    gcc-c++ \
    make \
    cmake \
    clang \
    patch \
    pkg-config \
    findutils \
    python3 \
    python3-pip \
    python3-devel \
    python3-setuptools \
    && microdnf clean all

# Install wheel package via pip
RUN pip3 install --no-cache-dir wheel

# Verify CPython installation
RUN python3 --version && \
    pip3 --version

# Set Python environment variables to avoid platform issues
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Copy files needed for dependency resolution first
COPY gradlew gradlew.bat settings.gradle.kts build.gradle.kts gradle.properties ./
COPY gradle/ gradle/

# Cache Gradle dependencies
RUN ./gradlew --no-daemon dependencies

# Copy the rest of the project files last to minimize cache busting
COPY . .

# Set up shared cache directory for GraalPy resource generation
VOLUME /graalpy-cache
ENV GRAALPY_CACHE=/graalpy-cache

# Increase memory limits for resource-intensive build tasks
ENV GRADLE_OPTS="-Dorg.gradle.jvmargs=-Xmx4g"

# Use buildkit cache for Gradle to avoid redownloading
RUN --mount=type=cache,target=/root/.gradle \
    --mount=type=cache,target=/graalpy-cache \
    ./gradlew --no-daemon --info clean graalPyResources

# --- Stage 2: Export Generated Resources ---
FROM scratch AS export-stage

# Export only the generated VFS resources for use in another image or local output
COPY --from=builder /app/build/generated/graalpy/resources/ /resources/

# USAGE:
# Build image:
#   docker build -f Dockerfile.graalpy-vfs -t graalpy-vfs .
#
# Export resources:
#   docker run --rm -v "$(pwd)/vfs-output:/out" graalpy-vfs \
#     sh -c "cp -r /resources/* /out/"
